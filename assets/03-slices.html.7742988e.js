import{r as c,o as l,c as u,a as n,b as a,w as t,F as r,e as o,d as s}from"./app.b3a2ff78.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";var k="/the-rust-programming-language/images/trpl04-06.svg";const d={},b={class:"table-of-contents"},m=s("4.3 Slice \u7C7B\u578B"),f=s("\u5B57\u7B26\u4E32 slice"),_=s("\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u662F slice"),w=s("\u5B57\u7B26\u4E32 Slice \u4F5C\u4E3A\u53C2\u6570"),g=s("\u5176\u4ED6\u7C7B\u578B\u7684 Slice"),h=s("\u603B\u7ED3"),y=o(`<h2 id="_4-3-slice-\u7C7B\u578B" tabindex="-1"><a class="header-anchor" href="#_4-3-slice-\u7C7B\u578B" aria-hidden="true">#</a> 4.3 Slice \u7C7B\u578B</h2><p><em>Slices</em> \u4F7F\u5F97\u6211\u4EEC\u80FD\u591F\u5F15\u7528\u96C6\u5408\u4E2D\u7684\u4E00\u8FDE\u4E32\u76F8\u90BB\u5143\u7D20, \u800C\u4E0D\u9700\u8981\u5F15\u7528\u6574\u4E2A\u96C6\u5408. slice \u662F\u5F15\u7528\u7684\u5176\u4E2D\u4E00\u79CD\u7C7B\u578B, \u56E0\u6B64\u5B83\u6CA1\u6709\u6240\u6709\u6743.</p><p>\u73B0\u5728\u6709\u4E00\u4E2A\u7B80\u5355\u7684\u7F16\u7A0B\u9898: \u5B9E\u73B0\u4E00\u4E2A\u51FD\u6570, \u63A5\u53D7\u4E00\u4E2A\u5B57\u7B26\u4E32\u4F5C\u4E3A\u51FD\u6570\u53C2\u6570, \u51FD\u6570\u6700\u7EC8\u8FD4\u56DE\u5B57\u7B26\u4E32\u7684\u9996\u4E2A\u5355\u8BCD. \u5982\u679C\u51FD\u6570\u6CA1\u6709\u4ECE\u5B57\u7B26\u4E32\u4E2D\u627E\u5230\u7A7A\u683C, \u90A3\u4E48\u6574\u4E2A\u5B57\u7B26\u4E32\u5C31\u662F\u4E00\u4E2A\u5355\u8BCD, \u6B64\u65F6\u8FD4\u56DE\u6574\u4E2A\u5B57\u7B26\u4E32.</p><p>\u5982\u679C\u6CA1\u6709 Slice \u7C7B\u578B\u7684\u8BDD, \u51FD\u6570\u5C06\u4F1A\u662F\u8FD9\u6837\u5B9E\u73B0\u7684:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>first_word</code> \u51FD\u6570\u63A5\u6536 <code>&amp;String</code> \u4F5C\u4E3A\u53C2\u6570. \u6211\u4EEC\u4E0D\u9700\u8981\u6240\u6709\u6743, \u56E0\u6B64\u8FD9\u6837\u662F\u6CA1\u6709\u95EE\u9898\u7684. \u4F46\u662F\u6211\u4EEC\u7684\u8FD4\u56DE\u503C\u5E94\u8BE5\u662F\u4EC0\u4E48\u5462? Rust \u4E2D\u6CA1\u6709\u83B7\u53D6\u90E8\u5206\u5B57\u7B26\u4E32\u7684\u65B9\u6CD5. \u4E0D\u8FC7\u6211\u4EEC\u53EF\u4EE5\u8FD4\u56DE\u5355\u8BCD\u7ED3\u5C3E\u7684\u7D22\u5F15, \u901A\u8FC7\u7A7A\u683C\u53EF\u4EE5\u77E5\u9053\u5355\u8BCD\u7684\u7ED3\u5C3E\u5728\u54EA\u91CC. \u73B0\u5728\u5C1D\u8BD5\u521B\u5EFA\u4EE5\u4E0B\u4EE3\u7801(4-7):</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u56E0\u4E3A\u6211\u4EEC\u9700\u8981\u904D\u5386 <code>String</code> \u4E2D\u7684\u6BCF\u4E00\u4E2A\u5143\u7D20\u6765\u786E\u8BA4\u67D0\u4E2A\u503C\u662F\u5426\u662F\u7A7A\u683C, \u6240\u4EE5\u7528 <code>as_byte</code> \u65B9\u6CD5\u5C06 <code>String</code> \u8F6C\u6362\u6210\u5B57\u8282\u6570\u7EC4:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u63A5\u4E0B\u6765\u6211\u4EEC\u7528 <code>iter</code> \u65B9\u6CD5\u5728\u5B57\u8282\u6570\u7EC4\u4E0A\u521B\u5EFA\u4E00\u4E2A\u8FED\u4EE3\u5668:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div>`,11),v=s("\u6211\u4EEC\u4F1A\u5728"),S={href:"https://doc.rust-lang.org/book/ch13-02-iterators.html",target:"_blank",rel:"noopener noreferrer"},x=s("\u7B2C 13 \u7AE0"),q=s("\u8BA8\u8BBA\u66F4\u591A\u5173\u4E8E\u8FED\u4EE3\u5668\u7684\u7EC6\u8282. \u73B0\u5728\u53EA\u9700\u8981\u77E5\u9053 "),R=n("code",null,"iter",-1),z=s(" \u8FD4\u56DE\u96C6\u5408\u4E2D\u7684\u6BCF\u4E00\u4E2A\u5143\u7D20, \u800C "),I=n("code",null,"enumerate",-1),F=s(" \u5305\u88C5\u4E86 "),E=n("code",null,"iter",-1),A=s(" \u7684\u7ED3\u679C, \u5C06\u8FD9\u4E9B\u5143\u7D20\u4F5C\u4E3A\u5143\u7EC4\u7684\u4E00\u90E8\u5206\u6765\u8FD4\u56DE. "),C=n("code",null,"enumerate",-1),L=s(" \u8FD4\u56DE\u7684\u5143\u7EC4\u4E2D, \u7B2C\u4E00\u4E2A\u5143\u7D20\u662F\u7D22\u5F15, \u7B2C\u4E8C\u4E2A\u662F\u96C6\u5408\u4E2D\u5143\u7D20\u7684\u5F15\u7528. \u8FD9\u6BD4\u6211\u4EEC\u81EA\u5DF1\u8BA1\u7B97\u7D22\u5F15\u8981\u66F4\u65B9\u4FBF\u4E00\u4E9B."),N=s("\u56E0\u4E3A "),T=n("code",null,"enumerate",-1),V=s(" \u65B9\u6CD5\u8FD4\u56DE\u4E00\u4E2A\u5143\u7EC4, \u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528\u6A21\u5F0F\u6765\u89E3\u6784\u8FD9\u4E2A\u5143\u7EC4. \u5728"),B={href:"https://doc.rust-lang.org/book/ch06-02-match.html#patterns-that-bind-to-values",target:"_blank",rel:"noopener noreferrer"},P=s("\u7B2C\u516D\u7AE0"),U=s("\u4E2D\u6211\u4EEC\u4F1A\u4ECB\u7ECD\u66F4\u591A\u5173\u4E8E\u6A21\u5F0F\u7684\u6982\u5FF5. \u5728 "),j=n("code",null,"for",-1),D=s(" \u5FAA\u73AF\u4E2D, \u6211\u4EEC\u58F0\u660E\u4E86\u4E00\u4E2A\u6A21\u5F0F: "),H=n("code",null,"i",-1),$=s(" \u662F\u5143\u7EC4\u4E2D\u7684\u7D22\u5F15, "),G=n("code",null,"&item",-1),J=s(" \u5219\u662F\u5143\u7EC4\u4E2D\u7684\u5355\u4E2A\u5B57\u8282. \u56E0\u4E3A\u4ECE "),K=n("code",null,".iter().enumerate()",-1),M=s(" \u4E2D\u83B7\u53D6\u5230\u7684\u662F\u5F15\u7528, \u56E0\u6B64\u6211\u4EEC\u9700\u8981\u5728\u6A21\u5F0F\u4E2D\u4F7F\u7528 "),O=n("code",null,"&",-1),Q=s(" ."),W=o(`<p>\u5728 <code>for</code> \u5FAA\u73AF\u4E2D, \u6211\u4EEC\u901A\u8FC7\u5B57\u8282\u5B57\u9762\u91CF\u8BED\u6CD5\u6765\u641C\u5BFB\u4EE3\u8868\u7A7A\u683C\u7684\u90E8\u5206. \u5982\u679C\u627E\u5230\u4E86\u7A7A\u683C, \u5C31\u4F1A\u8FD4\u56DE\u5B83\u6240\u5728\u7684\u4F4D\u7F6E, \u5426\u5219\u8FD4\u56DE\u5B57\u7B26\u4E32\u7684\u957F\u5EA6: <code>s.len()</code>:</p><p>\u73B0\u5728\u6211\u4EEC\u77E5\u9053\u4E86\u5982\u4F55\u627E\u5230\u5B57\u7B26\u4E32\u4E2D\u7684\u7B2C\u4E00\u4E2A\u5355\u8BCD\u672B\u5C3E\u7D22\u5F15\u7684\u65B9\u6CD5, \u4F46\u662F\u8FD8\u5B58\u5728\u4E00\u4E2A\u95EE\u9898. \u6211\u4EEC\u53EA\u8FD4\u56DE\u4E86\u4E00\u4E2A <code>usize</code> \u7C7B\u578B\u7684\u503C, \u53EF\u662F\u8FD9\u4E2A\u503C\u53EA\u6709\u5728 <code>&amp;String</code> \u5B58\u5728\u7684\u8BED\u5883\u4E0B\u624D\u6709\u610F\u4E49. \u4E5F\u5C31\u662F\u8BF4, \u56E0\u4E3A\u5B83\u4E0E <code>String</code> \u76F8\u4E92\u72EC\u7ACB, \u6CA1\u6709\u529E\u6CD5\u786E\u4FDD\u5B83\u5728\u672A\u6765\u4F9D\u7136\u662F\u5408\u6CD5\u7684. \u8003\u8651\u4EE3\u7801 4-8 \u4E2D\u7684\u7A0B\u5E8F, \u8FD9\u91CC\u4F7F\u7528\u4E86 4-7 \u4E2D\u7684 <code>first_word</code> \u51FD\u6570:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">usize</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> i<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// word \u6700\u7EC8\u7684\u503C\u662F 5</span>

    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// \u8FD9\u6BB5\u4EE3\u7801\u4F1A\u5C06 String \u6E05\u7A7A, \u4F7F\u5176\u503C\u53D8\u6210 &quot;&quot;</span>

    <span class="token comment">// word \u7684\u503C\u4F9D\u7136\u662F 5, \u4F46\u662F\u6CA1\u6709\u66F4\u591A\u7684\u5B57\u7B26\u4E32\u8BA9\u6211\u4EEC\u53EF\u4EE5\u6709\u6548\u5E94\u7528\u6570\u503C 5 \u4E86, \u56E0\u4E3A word \u7684\u503C\u73B0\u5728\u5B8C\u5168\u65E0\u6548!</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>\u4EE5\u4E0A\u7A0B\u5E8F\u7F16\u8BD1\u65F6\u4E0D\u4F1A\u51FA\u73B0\u4EFB\u4F55\u9519\u8BEF, \u5E76\u4E14\u5728\u8C03\u7528 <code>s.clear()</code> \u4E4B\u540E\u4F7F\u7528 <code>word</code> \u4E5F\u4E0D\u4F1A\u51FA\u9519. \u56E0\u4E3A <code>word</code> \u548C <code>s</code> \u7684\u72B6\u6001\u5E76\u6CA1\u6709\u4EFB\u4F55\u5173\u8054, <code>word</code> \u4ECD\u7136\u5305\u542B\u503C <code>5</code>. \u6211\u4EEC\u53EF\u4EE5\u4F7F\u7528 <code>5</code> \u548C\u53D8\u91CF <code>s</code> \u6765\u5C1D\u8BD5\u63D0\u53D6\u51FA\u7B2C\u4E00\u4E2A\u5355\u8BCD, \u4F46\u8FD9\u5176\u5B9E\u662F\u6709\u95EE\u9898\u7684, \u56E0\u4E3A\u5F53\u6211\u4EEC\u5728 <code>word</code> \u4E2D\u5B58\u50A8 <code>5</code> \u4E4B\u540E <code>s</code> \u7684\u5185\u5BB9\u5C31\u53D1\u751F\u53D8\u5316\u4E86.</p><p>\u8FD9\u6837\u7684\u8BDD, \u6211\u4EEC\u5C31\u9700\u8981\u65F6\u65F6\u523B\u523B\u62C5\u5FC3 <code>word</code> \u7684\u7D22\u5F15\u548C <code>s</code> \u4E2D\u6240\u5B58\u50A8\u7684\u6570\u636E\u4E0D\u5B9E\u65F6\u540C\u6B65, \u5341\u5206\u7E41\u7410\u4E14\u5F88\u5BB9\u6613\u51FA\u95EE\u9898. \u5982\u679C\u6211\u4EEC\u7684\u51FD\u6570\u662F <code>second_word</code>, \u7BA1\u7406\u7D22\u5F15\u7684\u95EE\u9898\u5C31\u66F4\u4E25\u91CD. \u51FD\u6570\u7B7E\u540D\u7684\u5185\u5BB9\u5C31\u5C06\u4F1A\u662F\u8FD9\u6837:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">second_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token punctuation">(</span><span class="token keyword">usize</span><span class="token punctuation">,</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u73B0\u5728\u6211\u4EEC\u8981\u8FFD\u8E2A\u8D77\u59CB\u548C\u672B\u5C3E\u7684\u7D22\u5F15, \u540C\u65F6\u9700\u8981\u8BA1\u7B97\u7279\u5B9A\u72B6\u6001\u4E0B\u66F4\u591A\u4E0E\u72B6\u6001\u65E0\u5173\u8054\u7684\u503C\u7684\u6570\u636E, \u73B0\u5728\u5DF2\u7ECF\u6709\u4E09\u4E2A\u4E0D\u76F8\u5173\u7684\u53D8\u91CF\u98D8\u5FFD\u4E0D\u5B9A, \u4F46\u9700\u8981\u4FDD\u6301\u540C\u6B65.</p><p>\u8FD8\u597D Rust \u63D0\u4F9B\u4E86\u4E00\u79CD\u65B9\u5F0F\u6765\u89E3\u51B3\u8FD9\u4E2A\u95EE\u9898: \u5B57\u7B26\u4E32 slice.</p><h3 id="\u5B57\u7B26\u4E32-slice" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32-slice" aria-hidden="true">#</a> \u5B57\u7B26\u4E32 slice</h3><p><strong>\u5B57\u7B26\u4E32 slice</strong>(<em>string slice</em>) \u662F <code>String</code> \u4E2D\u4E00\u90E8\u5206\u503C\u7684\u5F15\u7528, \u7C7B\u4F3C\u5982\u4E0B\u8FD9\u6837:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> hello <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> world <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">..</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><code>hello</code> \u4E0D\u662F\u6574\u4E2A <code>String</code> \u7684\u5F15\u7528\u800C\u662F <code>String</code> \u4E2D\u4E00\u90E8\u5206\u5185\u5BB9\u7684\u5F15\u7528, \u7531 <code>[0..5]</code> \u6307\u5B9A. \u6211\u4EEC\u4F7F\u7528\u4E2D\u62EC\u53F7\u7684\u8BED\u6CD5\u6765\u5212\u5B9A\u4E00\u4E2A\u8303\u56F4 <code>[starting_index..ending_index]</code>, <code>starting_index</code> \u662F slice \u7B2C\u4E00\u4E2A\u4F4D\u7F6E\u7684\u503C, <code>ending_index</code> \u5219\u662F slice \u6700\u540E\u4E00\u4E2A\u4F4D\u7F6E\u7684\u540E\u4E00\u4E2A\u503C. \u5185\u90E8, slice \u7684\u6570\u636E\u7ED3\u6784\u5B58\u50A8\u4E86 slice \u7684\u8D77\u59CB\u4F4D\u7F6E\u548C\u957F\u5EA6, \u957F\u5EA6\u503C\u4E3A <code>ending_index</code> \u51CF\u53BB <code>starting_index</code>. \u56E0\u6B64\u5728 <code>let world = &amp;s[6..11];</code> \u7684\u60C5\u51B5\u4E0B, <code>world</code> \u662F\u4E00\u4E2A\u5305\u542B\u6307\u5411 <code>s</code> \u7D22\u5F15 6 \u7684\u6307\u9488\u7684 slice, \u5B83\u7684\u957F\u5EA6\u503C\u4E3A 5.</p><p>\u7528\u56FE\u8868\u6765\u5448\u73B0\u5C31\u662F\u4E0B\u9762\u8FD9\u6837:</p><p><img src="`+k+`" alt="4-6"></p><p>\u6211\u4EEC\u7528\u5230\u4E86 Rust \u7684 <code>..</code> range \u8BED\u6CD5, \u5982\u679C\u4F60\u60F3\u8981\u4ECE\u7D22\u5F15 0 \u5F00\u59CB, \u53EF\u4EE5\u7701\u7565 <code>..</code> \u4E4B\u524D\u7684\u503C. \u5177\u4F53\u7684\u4EE3\u7801\u5C06\u4F1A\u662F\u8FD9\u6837:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>\u540C\u6837\u5730, \u5982\u679C\u4F60\u7684 slice \u5305\u542B <code>String</code> \u7684\u6700\u540E\u4E00\u4E2A\u5B57\u8282, \u4E5F\u53EF\u4EE5\u628A <code>..</code> \u4E4B\u540E\u7684\u503C\u7701\u7565. \u770B\u4E0B\u9762\u7684\u4EE3\u7801, \u6700\u540E\u4E24\u884C\u4EE3\u7801\u7684\u7ED3\u679C\u662F\u4E00\u81F4\u7684:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">..</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>\u5982\u679C <code>..</code> \u524D\u540E\u90FD\u7701\u7565\u4E86, \u90A3\u4E48 slice \u5C31\u662F\u6574\u4E2A\u5B57\u7B26\u4E32. \u56E0\u6B64\u4E0B\u9762\u7684\u7ED3\u679C\u4E00\u81F4:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code>
<span class="token attribute attr-name">#![allow(unused)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,20),X=s("\u6CE8\u610F: \u5B57\u7B26\u4E32 slice range \u7684\u7D22\u5F15\u5FC5\u987B\u4F4D\u4E8E\u6709\u6548\u7684 UTF-8 \u5B57\u7B26\u8FB9\u754C\u5185. \u5982\u679C\u4F60\u8BD5\u56FE\u5728\u591A\u5B57\u8282\u5B57\u7B26\u4E4B\u95F4\u521B\u5EFA\u5B57\u7B26\u4E32 slice, \u7A0B\u5E8F\u5C31\u4F1A\u5F02\u5E38\u9000\u51FA. \u5728\u672C\u7AE0\u6211\u4EEC\u4E3A\u4E86\u66F4\u597D\u5730\u4ECB\u7ECD\u5B57\u7B26\u4E32 slice \u7684\u6982\u5FF5, \u53EA\u4F7F\u7528 ASCII \u5B57\u7B26\u96C6. \u5728\u7B2C 8 \u7AE0: "),Y={href:"https://doc.rust-lang.org/book/ch08-02-strings.html#storing-utf-8-encoded-text-with-strings",target:"_blank",rel:"noopener noreferrer"},Z=s("\u4F7F\u7528\u5B57\u7B26\u4E32\u5B58\u50A8 UTF-8 \u7F16\u7801\u7684\u6587\u672C"),nn=s(" \u90E8\u5206, \u6211\u4EEC\u4F1A\u66F4\u52A0\u8BE6\u7EC6\u5730\u63A2\u8BA8 UTF-8 \u7684\u5904\u7406\u95EE\u9898."),sn=o(`<p>\u73B0\u5728\u6211\u4EEC\u5DF2\u7ECF\u4E86\u89E3\u4E86\u9700\u8981\u4E86\u89E3\u7684\u4FE1\u606F, \u5F00\u59CB\u4FEE\u6539 <code>first_word</code> \u51FD\u6570\u6765\u8FD4\u56DE slice. \u6807\u8BC6\u5B57\u7B26\u4E32 slice \u7684\u7C7B\u578B\u88AB\u5199\u4F5C: <code>&amp;str</code>:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>\u548C\u5728\u4EE3\u7801\u793A\u4F8B 4-7 \u4E2D\u4E00\u6837, \u6211\u4EEC\u901A\u8FC7\u5BFB\u627E\u5B57\u7B26\u4E32\u4E2D\u7684\u7A7A\u683C\u83B7\u53D6\u4E86\u5355\u8BCD\u7ED3\u5C3E\u7684\u7D22\u5F15. \u5F53\u6211\u4EEC\u627E\u5230\u4E00\u4E2A\u7A7A\u683C\u65F6, \u5C31\u8FD4\u56DE\u4E00\u4E2A\u5B57\u7B26\u4E32 slice, \u8FD9\u4E2A slice \u7528\u5B57\u7B26\u4E32\u7684\u5F00\u59CB\u4F4D\u7F6E\u4F5C\u4E3A\u5F00\u59CB\u7D22\u5F15, \u7A7A\u683C\u4F4D\u7F6E\u4F5C\u4E3A\u7ED3\u675F\u7D22\u5F15.</p><p>\u73B0\u5728\u5F53\u6211\u4EEC\u8C03\u7528 <code>first_word</code> \u51FD\u6570, \u4F1A\u8FD4\u56DE\u4E0E\u5E95\u5C42\u6570\u636E\u5173\u8054\u7684\u5355\u4E2A\u503C. \u8FD9\u4E2A\u503C\u7531 slice \u5F00\u59CB\u4F4D\u7F6E\u7684\u5F15\u7528\u548C slice \u4E2D\u5143\u7D20\u7684\u6570\u91CF\u7EC4\u6210.</p><p><code>second_word</code> \u65B9\u6CD5\u4E5F\u53EF\u4EE5\u8FD4\u56DE\u4E00\u4E2A slice:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">second_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u73B0\u5728\u6211\u4EEC\u6709\u4E86\u4E00\u4E2A\u66F4\u7B80\u5355\u4E0D\u6613\u6DF7\u6DC6\u7684 API, \u56E0\u4E3A\u7F16\u8BD1\u5668\u4F1A\u786E\u4FDD <code>String</code> \u7684\u5F15\u7528\u59CB\u7EC8\u4FDD\u6301\u5408\u6CD5. \u518D\u56DE\u987E\u4EE3\u7801\u793A\u4F8B 4-8 \u4E2D\u7684 bug, \u5F53\u6211\u4EEC\u83B7\u53D6\u7B2C\u4E00\u4E2A\u5355\u8BCD\u7ED3\u5C3E\u7684\u7D22\u5F15\u540E, \u5C31\u628A\u5B57\u7B26\u4E32\u6E05\u9664\u4E86, \u8FD9\u5BFC\u81F4\u6211\u4EEC\u7684\u7D22\u5F15\u53D8\u6210\u4E86\u65E0\u6548. \u90A3\u90E8\u5206\u4EE3\u7801\u5728\u903B\u8F91\u4E0A\u4E0D\u6B63\u786E, \u4F46\u662F\u4E0D\u4F1A\u76F4\u63A5\u629B\u51FA\u9519\u8BEF. \u5F53\u6211\u4EEC\u540E\u7EED\u5C1D\u8BD5\u4F7F\u7528\u7A7A\u5B57\u7B26\u4E32\u7684\u7B2C\u4E00\u4E2A\u7D22\u5F15\u65F6, \u9519\u8BEF\u5C31\u4F1A\u629B\u51FA\u6765\u4E86. \u4E0D\u8FC7\u73B0\u5728\u6211\u4EEC\u77E5\u9053\u4E86 slice, \u4F7F\u7528 slice \u5C31\u80FD\u907F\u514D\u8FD9\u4E2A\u9519\u8BEF, \u5E76\u4E14\u5E2E\u52A9\u6211\u4EEC\u63D0\u524D\u53D1\u73B0\u4EE3\u7801\u4E2D\u7684\u95EE\u9898. \u5982\u679C\u628A <code>first_word</code> \u6539\u6210 slice \u7248\u672C, \u5728\u7F16\u8BD1\u9636\u6BB5\u5C31\u4F1A\u629B\u51FA\u9519\u8BEF:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> s <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>

    s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// error!</span>

    <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;the first word is: {}&quot;</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>\u5177\u4F53\u7684\u9519\u8BEF\u4FE1\u606F\u5982\u4E0B:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>$ cargo run
   Compiling ownership v0.1.0 <span class="token punctuation">(</span>file:///projects/ownership<span class="token punctuation">)</span>
error<span class="token punctuation">[</span>E0502<span class="token punctuation">]</span>: cannot borrow <span class="token variable"><span class="token variable">\`</span>s<span class="token variable">\`</span></span> as mutable because it is also borrowed as immutable
  --<span class="token operator">&gt;</span> src/main.rs:18:5
   <span class="token operator">|</span>
<span class="token number">16</span> <span class="token operator">|</span>     <span class="token builtin class-name">let</span> word <span class="token operator">=</span> first_word<span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">|</span>                           -- immutable borrow occurs here
<span class="token number">17</span> <span class="token operator">|</span> 
<span class="token number">18</span> <span class="token operator">|</span>     s.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // error<span class="token operator">!</span>
   <span class="token operator">|</span>     ^^^^^^^^^ mutable borrow occurs here
<span class="token number">19</span> <span class="token operator">|</span> 
<span class="token number">20</span> <span class="token operator">|</span>     println<span class="token operator">!</span><span class="token punctuation">(</span><span class="token string">&quot;the first word is: {}&quot;</span>, word<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token operator">|</span>                                       ---- immutable borrow later used here

For <span class="token function">more</span> information about this error, try <span class="token variable"><span class="token variable">\`</span>rustc --explain E0502<span class="token variable">\`</span></span><span class="token builtin class-name">.</span>
error: could not compile <span class="token variable"><span class="token variable">\`</span>ownership<span class="token variable">\`</span></span> due to previous error
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>\u56DE\u60F3\u4E00\u4E0B\u501F\u7528\u7684\u89C4\u5219, \u5982\u679C\u6211\u4EEC\u5BF9\u4E8E\u67D0\u4E2A\u503C\u6709\u4E00\u4E2A\u4E0D\u53EF\u53D8\u5F15\u7528, \u5C31\u4E0D\u80FD\u518D\u83B7\u53D6\u4E00\u4E2A\u53EF\u53D8\u5F15\u7528\u4E86. \u56E0\u4E3A\u8C03\u7528 <code>clear</code> \u65B9\u6CD5\u4E4B\u540E, \u5C31\u4F1A\u6E05\u7A7A <code>String</code>, \u8981\u5B9E\u73B0\u8FD9\u4E00\u6B65\u5FC5\u987B\u8981\u83B7\u53D6\u53EF\u53D8\u5F15\u7528. \u5728\u8C03\u7528\u5B8C <code>clear</code> \u65B9\u6CD5\u4E4B\u540E, <code>println!</code> \u9700\u8981\u4F7F\u7528 <code>word</code> \u7684\u5F15\u7528, \u56E0\u6B64\u6B64\u65F6\u4E0D\u53EF\u53D8\u5F15\u7528\u5FC5\u987B\u4FDD\u6301\u53EF\u7528\u7684\u72B6\u6001. Rust \u4E0D\u5141\u8BB8 <code>clear</code> \u4E2D\u7684\u53EF\u53D8\u5F15\u7528\u548C <code>word</code> \u4E2D\u7684\u4E0D\u53EF\u53D8\u5F15\u7528\u540C\u65F6\u5B58\u5728, \u56E0\u6B64\u7F16\u8BD1\u4F1A\u5931\u8D25. Rust \u4E0D\u4EC5\u4F7F\u5F97\u6211\u4EEC\u7684 API \u66F4\u5BB9\u6613\u4F7F\u7528, \u8FD8\u80FD\u591F\u5E2E\u52A9\u6211\u4EEC\u5728\u7F16\u8BD1\u9636\u6BB5\u6D88\u9664\u4E00\u6574\u7C7B\u7684\u9519\u8BEF!</p><h3 id="\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u662F-slice" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u662F-slice" aria-hidden="true">#</a> \u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u662F slice</h3><p>\u8FD8\u8BB0\u5F97\u6211\u4EEC\u4E4B\u524D\u63D0\u5230\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u88AB\u5B58\u50A8\u5728\u4E8C\u8FDB\u5236\u6587\u4EF6\u4E2D. \u73B0\u5728\u6211\u4EEC\u5DF2\u7ECF\u4E86\u89E3\u4E86 slice, \u90A3\u4E48\u5C31\u80FD\u591F\u66F4\u597D\u5730\u7406\u89E3\u5B57\u7B26\u4E32\u5B57\u9762\u91CF:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token string">&quot;Hello, world!&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>s</code> \u5728\u8FD9\u91CC\u5C5E\u4E8E <code>&amp;str</code> \u7C7B\u578B: \u5B83\u662F\u4E00\u4E2A\u6307\u5411\u4E8C\u8FDB\u5236\u7A0B\u5E8F\u7279\u5B9A\u4F4D\u7F6E\u7684 slice. \u8FD9\u4E5F\u662F\u4E3A\u4EC0\u4E48\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u4E0D\u53EF\u53D8\u7684\u539F\u56E0; <code>&amp;str</code> \u662F\u4E00\u4E2A\u4E0D\u53EF\u53D8\u5F15\u7528.</p><h3 id="\u5B57\u7B26\u4E32-slice-\u4F5C\u4E3A\u53C2\u6570" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32-slice-\u4F5C\u4E3A\u53C2\u6570" aria-hidden="true">#</a> \u5B57\u7B26\u4E32 Slice \u4F5C\u4E3A\u53C2\u6570</h3><p>\u77E5\u9053\u4E86\u80FD\u591F\u83B7\u53D6\u5B57\u9762\u91CF\u7684 slice \u548C <code>String</code> \u7684\u503C\u4E4B\u540E, \u6211\u4EEC\u53EF\u4EE5\u5BF9 <code>first_word</code> \u8FDB\u884C\u6539\u8FDB, \u8FD9\u662F\u5B83\u7684\u7B7E\u540D:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>\u66F4\u6709\u7ECF\u9A8C\u7684 rust \u5F00\u53D1\u8005\u6240\u7F16\u5199\u7684\u51FD\u6570\u7B7E\u540D\u5C06\u4F1A\u662F\u5982\u4E0B\u4EE3\u7801 4-9 \u8FD9\u6837, \u56E0\u4E3A\u8FD9\u6837\u7684\u8BDD, \u53C2\u6570\u7684\u7C7B\u578B\u53EF\u4EE5\u662F <code>&amp;String</code> \u4E5F\u53EF\u4EE5\u662F <code>&amp;str</code>.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> my_string <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \`first_word\` \u652F\u6301\u63A5\u53D7 String \u7C7B\u578B, \u4E5F\u652F\u6301 String \u7684 slice \u4F5C\u4E3A\u53C2\u6570</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \`first_word\` \u8FD8\u652F\u6301\u63A5\u53D7 String \u7C7B\u578B\u7684\u5F15\u7528, \u548C\u6574\u4E2A String \u65E0\u5F02</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> my_string_literal <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// \`first_word\` \u540C\u6837\u63A5\u53D7 String \u5B57\u9762\u91CF\u7684 slice, \u4E0D\u7BA1\u662F\u5168\u90E8\u8FD8\u662F\u90E8\u5206</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string_literal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string_literal<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u56E0\u4E3A string \u5B57\u9762\u91CF\u4E5F\u5C5E\u4E8E string \u7684 slice</span>
    <span class="token comment">// \u56E0\u6B64\u4E0B\u9762\u7684\u4EE3\u7801\u4E5F\u662F\u6709\u6548\u7684</span>

    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span>my_string_literal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div>`,20),an=s("\u5982\u679C\u73B0\u5728\u6709\u4E00\u4E2A\u5B57\u7B26\u4E32 slice, \u6211\u4EEC\u53EF\u4EE5\u76F4\u63A5\u5C06\u5176\u4F5C\u4E3A\u53C2\u6570\u4F20\u5165. \u5982\u679C\u6709\u4E00\u4E2A "),pn=n("code",null,"String",-1),tn=s(", \u53EF\u4EE5\u4F20\u9012\u8FD9\u4E2A "),en=n("code",null,"String",-1),on=s(" \u7684 slice, \u6216\u8005\u8FD9\u4E2A "),cn=n("code",null,"String",-1),ln=s(" \u7684\u5F15\u7528. \u8FD9\u79CD\u7075\u6D3B\u6027\u5229\u7528\u4E86 "),un=n("em",null,"deref coercions",-1),rn=s(" \u7684\u4F18\u52BF, \u6211\u4EEC\u4F1A\u5728\u7B2C15\u7AE0\u7684"),kn={href:"https://doc.rust-lang.org/book/ch15-02-deref.html#implicit-deref-coercions-with-functions-and-methods",target:"_blank",rel:"noopener noreferrer"},dn=s("\u51FD\u6570\u548C\u65B9\u6CD5\u9690\u5F0F Deref \u5F3A\u5236\u8F6C\u6362"),bn=s("\u90E8\u5206\u4E2D\u5BF9\u8FD9\u4E2A\u7279\u6027\u8FDB\u884C\u4ECB\u7ECD. \u5B9A\u4E49\u4E00\u4E2A\u51FD\u6570, \u63A5\u53D7\u5B57\u7B26\u4E32 slice \u800C\u4E0D\u662F "),mn=n("code",null,"String",-1),fn=s(" \u7684\u5F15\u7528\u4F7F\u5F97\u6211\u4EEC\u7684 API \u66F4\u52A0\u901A\u7528\u4E14\u4E0D\u4F1A\u6709\u4EFB\u4F55\u529F\u80FD\u7684\u7F3A\u5931:"),_n=o(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">first_word</span><span class="token punctuation">(</span>s<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token operator">&amp;</span><span class="token keyword">str</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> bytes <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">as_bytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token operator">&amp;</span>item<span class="token punctuation">)</span> <span class="token keyword">in</span> bytes<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enumerate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token char">b&#39; &#39;</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token operator">&amp;</span>s<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> my_string <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;hello world&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \`first_word\` \u63A5\u53D7\u5B57\u7B26\u4E32 slice, \u4E0D\u7BA1\u662F\u5168\u90E8\u8FD8\u662F\u90E8\u5206</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \`first_word\` \u540C\u6837\u63A5\u53D7 String \u7684\u5F15\u7528, \u548C\u5B57\u7B26\u4E32\u7684\u6574\u4E2A slice \u65E0\u5F02 </span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> my_string_literal <span class="token operator">=</span> <span class="token string">&quot;hello world&quot;</span><span class="token punctuation">;</span>

    <span class="token comment">// \`first_word\` \u540C\u6837\u63A5\u53D7 String \u5B57\u9762\u91CF\u7684 slice, \u4E0D\u7BA1\u662F\u5168\u90E8\u8FD8\u662F\u90E8\u5206</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string_literal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">..</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>my_string_literal<span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// \u56E0\u4E3A\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u672C\u8EAB\u5C31\u662F\u5B57\u7B26\u4E32 slice, \u6240\u4EE5\u4EE5\u4E0B\u8BED\u6CD5\u4F9D\u7136\u751F\u6548</span>
    <span class="token keyword">let</span> word <span class="token operator">=</span> <span class="token function">first_word</span><span class="token punctuation">(</span>my_string_literal<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h3 id="\u5176\u4ED6\u7C7B\u578B\u7684-slice" tabindex="-1"><a class="header-anchor" href="#\u5176\u4ED6\u7C7B\u578B\u7684-slice" aria-hidden="true">#</a> \u5176\u4ED6\u7C7B\u578B\u7684 Slice</h3><p>\u622A\u6B62\u76EE\u524D, \u6211\u4EEC\u8BB2\u5230\u7684 slice \u53EA\u9488\u5BF9\u5B57\u7B26\u4E32. \u5F53\u7136\u6709\u4E9B\u5176\u4ED6\u7C7B\u578B\u7684\u6570\u636E\u4E5F\u6709 slice. \u67E5\u770B\u4EE5\u4E0B\u6570\u7EC4:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>\u6B63\u5982\u60F3\u8981\u5F15\u7528\u5B57\u7B26\u4E32\u7684\u4E00\u90E8\u5206\u4E00\u6837, \u6211\u4EEC\u4E5F\u4F1A\u60F3\u8981\u5F15\u7528\u6570\u7EC4\u7684\u4E00\u90E8\u5206. \u53EF\u4EE5\u8FD9\u6837\u64CD\u4F5C:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#![allow(unused)]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> slice <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token macro property">assert_eq!</span><span class="token punctuation">(</span>slice<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>\u8FD9\u4E2A slice \u7684\u7C7B\u578B\u662F <code>&amp;[i32]</code>. \u548C\u5B57\u7B26\u4E32 slice \u7684\u5DE5\u4F5C\u673A\u5236\u4E00\u6837, \u90FD\u662F\u901A\u8FC7\u5B58\u50A8\u7B2C\u4E00\u4E2A\u5143\u7D20\u7684\u5F15\u7528\u548C\u96C6\u5408\u7684\u957F\u5EA6\u5B9E\u73B0\u7684. \u5BF9\u4E8E\u4EFB\u4F55\u5176\u4ED6\u7C7B\u578B\u7684\u96C6\u5408, \u4F60\u90FD\u53EF\u4EE5\u4F7F\u7528\u8FD9\u7C7B slice. \u5728\u7B2C 8 \u7AE0\u8C08\u5230\u5411\u91CF(vector)\u7684\u65F6\u5019, \u6211\u4EEC\u4F1A\u8BA8\u8BBA\u66F4\u591A\u5173\u4E8E\u8FD9\u4E9B\u96C6\u5408\u7684\u7EC6\u8282.</p><h3 id="\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#\u603B\u7ED3" aria-hidden="true">#</a> \u603B\u7ED3</h3><p>\u6240\u6709\u6743, \u501F\u7528, slice \u7684\u6982\u5FF5\u786E\u4FDD\u4E86 Rust \u7A0B\u5E8F\u5728\u7F16\u8BD1\u9636\u6BB5\u7684\u5185\u5B58\u5B89\u5168. \u548C\u5176\u4ED6\u7CFB\u7EDF\u7F16\u7A0B\u8BED\u8A00\u4E00\u6837, Rust \u4E5F\u7ED9\u4E86\u5F00\u53D1\u8005\u7BA1\u7406\u5185\u5B58\u7684\u63A7\u5236\u6743. \u5728 Rust \u4E2D\u8FD8\u6709\u4E00\u70B9\u597D\u5904\u5C31\u662F, \u5F53\u6570\u636E\u7684\u6240\u6709\u8005\u8DF3\u51FA\u4F5C\u7528\u57DF\u4E4B\u540E, \u6570\u636E\u5C31\u4F1A\u88AB\u6E05\u7A7A, \u8FD9\u8868\u660E\u6211\u4EEC\u4E0D\u518D\u9700\u8981\u989D\u5916\u81EA\u5DF1\u5B9E\u73B0\u548C\u8C03\u8BD5\u63A7\u5236\u76F8\u5173\u7684\u4EE3\u7801.</p><p>\u6240\u6709\u6743\u7684\u6982\u5FF5\u5BF9 Rust \u5F88\u591A\u5176\u4ED6\u90E8\u5206\u7684\u5DE5\u4F5C\u673A\u5236\u4E5F\u6709\u6240\u5F71\u54CD, \u56E0\u6B64\u5728\u672C\u4E66\u7684\u5269\u4F59\u90E8\u5206, \u6211\u4EEC\u4E5F\u4F1A\u8BA8\u8BBA\u5230\u66F4\u591A\u76F8\u5173\u7684\u6982\u5FF5. \u73B0\u5728\u6211\u4EEC\u5F00\u59CB\u7B2C\u4E94\u7AE0\u7684\u5B66\u4E60: \u5982\u4F55\u5C06\u591A\u4EFD\u6570\u636E\u7EC4\u5408\u8FDB\u4E00\u4E2A <code>struct</code> \u4E2D.</p>`,10);function wn(gn,hn){const p=c("RouterLink"),e=c("ExternalLinkIcon");return l(),u(r,null,[n("nav",b,[n("ul",null,[n("li",null,[a(p,{to:"#_4-3-slice-\u7C7B\u578B"},{default:t(()=>[m]),_:1}),n("ul",null,[n("li",null,[a(p,{to:"#\u5B57\u7B26\u4E32-slice"},{default:t(()=>[f]),_:1})]),n("li",null,[a(p,{to:"#\u5B57\u7B26\u4E32\u5B57\u9762\u91CF\u662F-slice"},{default:t(()=>[_]),_:1})]),n("li",null,[a(p,{to:"#\u5B57\u7B26\u4E32-slice-\u4F5C\u4E3A\u53C2\u6570"},{default:t(()=>[w]),_:1})]),n("li",null,[a(p,{to:"#\u5176\u4ED6\u7C7B\u578B\u7684-slice"},{default:t(()=>[g]),_:1})]),n("li",null,[a(p,{to:"#\u603B\u7ED3"},{default:t(()=>[h]),_:1})])])])])]),y,n("p",null,[v,n("a",S,[x,a(e)]),q,R,z,I,F,E,A,C,L]),n("p",null,[N,T,V,n("a",B,[P,a(e)]),U,j,D,H,$,G,J,K,M,O,Q]),W,n("blockquote",null,[n("p",null,[X,n("a",Y,[Z,a(e)]),nn])]),sn,n("p",null,[an,pn,tn,en,on,cn,ln,un,rn,n("a",kn,[dn,a(e)]),bn,mn,fn]),_n],64)}var Sn=i(d,[["render",wn]]);export{Sn as default};
